
exports.RecordSet = function(db, tableName, fieldDefs) {

  var self = this;
  
  self.db = db;
  self.tableName = tableName;
  self.fieldDefs = fieldDefs;
  
  
  self.foreachFieldDef = function(fnLoopAction) {
    var arrLen = self.fieldDefs.length;
    for (var i = 0; i < arrLen; i++) {
      fnLoopAction(self.fieldDefs[i]);
    }
  };
  
  
  self.getColumnNames = function() {
    var aColNames = [];
    self.foreachFieldDef( function(fieldDef) {
      aColNames.push(fieldDef['columnname']);
    });
    return aColNames
  };


  self.createSql = function() {
    var strSelectColumns = self.getColumnNames().join(", ");
    strSql = "SELECT " + strSelectColumns + " FROM " + self.tableName;
    return strSql;
  };

  self.createSqlWhere = function() {
	  
	  var cond = [];
	  var i = 1;
	  self.foreachFieldDef( function(fieldDef) {
		 if (fieldDef.isPk) {
			 cond.push(fieldDef['columnname']+' = :'+i );
			 i += 1;
		 } 
	  });
	  return cond.join(' AND ');
  };

	  
  self.queryList = function(fnReady, fnError) {
	  self.db.query( self.createSql(), [], fnReady, fnError );
  };
  
  
  self.queryItem = function(keys, fnReady, fnError) {
	    var sql = self.createSql() + ' WHERE ' + self.createSqlWhere();
	    self.db.query( sql, keys, fnReady, fnError );
  };

  
  self.getColumnHeaders = function(rawValues) {
    var aHeaders = [];
    self.foreachFieldDef( function(fieldDef) {
      aHeaders.push(fieldDef['caption']);
    });
    return aHeaders;
  };
  
  
  self.prepareValue = function(rawValue, aRawValues, fieldDef) {
      var value = rawValue;
	  if (fieldDef.displayFilter != null) {
		  value = fieldDef.displayFilter(value, aRawValues);
	  }
	  if (value == null) { value = ''; }
	  if (fieldDef.linkUrl != null) {
		  value = '<A HREF="'+fieldDef.linkUrl + rawValue + '">' + value + '</A>'
	  }
      return value;
  };
  
  
  self.getDisplayValues = function(aRawValues) {
    var aValues = [];
    self.foreachFieldDef( function(fieldDef) {
      var rawValue = aRawValues[fieldDef['columnname']];
      aValues.push(self.prepareValue(rawValue, aRawValues, fieldDef));
    });
    return aValues;
  };


  return this;
};


exports.ValueList = function(db, tableName, keyFld, valueFld) {

  var self = this;
  
  self.db = db;
  self.tableName = tableName;
  self.keyFld = keyFld;
  self.valueFld = valueFld;
  self.values = [];
  
  self.createSql = function() {
	return "SELECT " + self.keyFld + ", " + self.valueFld + " FROM " + self.tableName;
  };
	  
  
  self.query = function(fnOk, fnError) {  
	self.db.query( self.createSql(), [], function(result) {
		self.values = []
		for (var i in result) {
			self.values[result[i][self.keyFld]] = result[i][self.valueFld] 
		}
		if (fnOk) fnOk();
	}, fnError );
  };
  
  
  self.getValue = function(key) {
	return self.values[key]
  }
  

  self.getItemRef = function(key) {
    return key + " <i>" + self.getValue(key) + "</i>";
  }
  
};




